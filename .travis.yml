# Travis CI script
################################################################################
# This file is based on a template used by zproject, but isn't auto-generated. #
################################################################################

language:
- c
- python

python:
- '2.7'

# Cache the previous build areas, to reuse them if respective components
# (or their dependencies) did not change since last build. The Makefile
# should detect if some git HEAD marker file became newer and would then
# rebuild and reinstall the component (and those who depend on it).
cache:
  pip: true
  ccache: true
  directories:
    - ${TRAVIS_BUILD_DIR}/.srcclone/
    - ${TRAVIS_BUILD_DIR}/.build/
    - ${TRAVIS_BUILD_DIR}/.install/

os:
- linux

# Note: some packages or dependencies may require extended permissions
# which take longer to set up and boot. If your project does not build
# in the default container with sudo==false, consider requiring a docker
# image and/or a newer Ubuntu Trusty baseline VM, by uncommenting below.
# See the current docs on http://travis-ci.org for up-to-date options.
#sudo: false
# Note: Since fall'2017, "sudo" seems required to pass "pip install" below.
sudo: required

dist:
- trusty

services:
- docker

# Common required packages for all common scenarios
# Note that YAML lists may be named with & and referenced with * characters;
# but without such links, every list is complete and unique (meaning that
# matrix special cases define their own settings, not append to common ones).
# See https://github.com/travis-ci/travis-ci/issues/3505
pkg_deps_prereqs_fty_overall: &pkg_deps_prereqs_fty_overall
    - libcppunit-dev
    - libcppunit-subunit-dev
    - libneon27
    - libneon27-dev
    - libltdl7
    - libltdl-dev
    - libi2c-dev
    - lua5.1
    - liblua5.1-0-dev
    - libsnmp-dev
    - libfreeipmi-dev
    - libipmimonitoring-dev
    - libusb-dev
    - linux-libc-dev
    - libpowerman0-dev
    - libavahi-common-dev
    - libavahi-core-dev
    - libavahi-client-dev
    - libgd2-xpm-dev
    - libpng-dev
    - libjpeg-dev
    - libfreetype6-dev
    - libxpm-dev
    - libxml2-utils
    - xsltproc
    - uuid-dev
    - libsasl2-2
    - libsasl2-dev
    - sasl2-bin
    - apport
#Eubuntu-too-old#    - liblog4cplus-dev
    - libmysqlclient-dev
#   - libsodium-dev
#   - libsqlite3-dev
#   - libpq-dev
#?#   - libmariadbclient-dev
#?#   - libmariadbd-dev

pkg_deps_doctools: &pkg_deps_doctools
    - asciidoc
    - xmlto
    - dblatex
    - docbook-xsl
    - docbook-xsl-ns
    - source-highlight
    - aspell
    - aspell-en

pkg_deps_devtools: &pkg_deps_devtools
    - git
    - ccache
    - gcc-4.9
    - g++-4.9

# Note: gcc-4.8 => trusty (ubuntu14) or newer
# liblsan (leak sanitizer) is in gcc-4.9, 5.x etc. - not in trusty default repo
pkg_deps_asan: &pkg_deps_asan
#    - libgcc-4.8-dev
    - libgcc-4.9-dev
#    - liblsan0
#    - libasan0
#    - libasan1
#    - libasan2
#    - libtsan0
#    - libubsan0

# For old case - we build our forks or referrals
#pkg_deps_prereqs_czmq3: &pkg_deps_prereqs_czmq3
#    - libzmq3-dev
#    - libczmq-dev
#    - libmlm-dev

# For new case - we use prepackaged upstream masters
pkg_deps_prereqs_zmq_master: &pkg_deps_prereqs_zmq_master
    - libsodium-dev
    - libzmq5-dev
    - libczmq-dev
    - libmlm-dev

# Be careful expanding these in usage below. See https://github.com/zeromq/zproject/issues/1188
pkg_src_zeromq_ubuntu12: &pkg_src_zeromq_ubuntu12
- sourceline: 'deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_12.04/ ./'
  key_url: 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_12.04/Release.key'

pkg_src_zeromq_ubuntu14: &pkg_src_zeromq_ubuntu14
- sourceline: 'deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_14.04/ ./'
  key_url: 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_14.04/Release.key'

pkg_src_zeromq_ubuntu14-noobj: &pkg_src_zeromq_ubuntu14-noobj
  sourceline: 'deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_14.04/ ./'
  key_url: 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_14.04/Release.key'

pkg_src_zeromq_ubuntu14-tc: &pkg_src_zeromq_ubuntu14-tc
- sourceline: 'deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_14.04/ ./'
  key_url: 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_14.04/Release.key'
- ubuntu-toolchain-r-test

pkg_src_zeromq_ubuntu16: &pkg_src_zeromq_ubuntu16
- sourceline: 'deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_16.04/ ./'
  key_url: 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_16.04/Release.key'

pkg_src_zeromq_ubuntu16-tc: &pkg_src_zeromq_ubuntu16-tc
- sourceline: 'deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_16.04/ ./'
  key_url: 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_16.04/Release.key'
- ubuntu-toolchain-r-test

# Note: refer to ubuntu14 if you use dist==Trusty for default platform and packaged ZMQ
# or ubuntu16 for dist==xenial
addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    #- *pkg_src_zeromq_ubuntu14
    packages: &pkg_deps_common
    - *pkg_deps_devtools
    - *pkg_deps_prereqs_fty_overall

# Set CI_TIME=true to enable build-step profiling in Travis
# Set CI_TRACE=true to enable shell script tracing in Travis
# Set CI_CONFIG_QUIET=true to enable "configure --quiet" (only report stderr)
# Set CI_GIT_RESYNC=true to pull latest sources for each submodule, or set it
#   to "false" and check out just the commit IDs pointed to by FTY repo snapshot
# Set CI_WIPE_FIRST=true to "make wipe" the workspace before builds
env:
  global:
    - DEFAULT_CI_TIME=true
    - DEFAULT_CI_TRACE=false
    - DEFAULT_CI_QUIET=true
    - DEFAULT_CI_GIT_RESYNC=false
    - DEFAULT_CI_WIPE_FIRST=false
    - DEFAULT_CI_PARMAKE_QUIET=true

# Note: this matrix currently assumes that "CI_CZMQ_VER=4" means builds
# against upstream/master from github, and "CI_CZMQ_VER=3" means usage
# of our legacy forked variant based on "czmq-v3.0.2" also from github,
# and "CI_CZMQ_VER=pkg" means usage of pre-packaged binaries from upstream.
# In either of the source builds, the libsodium, libzmq and malamute are
# from respective upstream/master's.
# We group the most informative builds first so they complete (or fail) early.
matrix:
  include:
  - env: BUILD_TYPE=help CI_GIT_SUBMODULES=false
    os: linux
    services: docker
  - env: CI_CZMQ_VER=3 BUILD_TYPE=default-tgt:install-all
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_doctools

  - env: CI_CZMQ_VER=4 BUILD_TYPE=default-tgt:install-all
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_doctools

  - env: CI_CZMQ_VER=pkg BUILD_TYPE=default-tgt:install-all
    os: linux
    dist: trusty
    services: docker
    sudo: required
    addons:
      apt:
#        sources: *pkg_src_zeromq_ubuntu14-tc
#        sources:
#        - sourceline: 'deb http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_14.04/ ./'
#          key_url: 'http://download.opensuse.org/repositories/network:/messaging:/zeromq:/git-draft/xUbuntu_14.04/Release.key'
#        - ubuntu-toolchain-r-test
        sources:
        - *pkg_src_zeromq_ubuntu14-noobj
#        <<: *pkg_src_zeromq_ubuntu14
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_doctools
        - *pkg_deps_prereqs_zmq_master


  - env: CI_CZMQ_VER=3 BUILD_TYPE=default-tgt:memcheck
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - valgrind

  - env: CI_CZMQ_VER=4 BUILD_TYPE=default-tgt:memcheck
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - valgrind

  - env: CI_CZMQ_VER=pkg BUILD_TYPE=default-tgt:memcheck
    os: linux
    dist: trusty
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        - *pkg_src_zeromq_ubuntu14
        packages:
        - *pkg_deps_common
        - valgrind
        - *pkg_deps_prereqs_zmq_master


  - env: CI_CZMQ_VER=3 ADDRESS_SANITIZER=enabled BUILD_TYPE=default-tgt:check
    os: linux
    dist: trusty
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_asan

  - env: CI_CZMQ_VER=4 ADDRESS_SANITIZER=enabled BUILD_TYPE=default-tgt:check
    os: linux
    dist: trusty
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_asan

# The pre-packaged variant seems to have been built on a newer environment than
# Travis CI has available - so these runs fail due to "can not find -llsan"...
#  - env: CI_CZMQ_VER=pkg ADDRESS_SANITIZER=enabled BUILD_TYPE=default-tgt:check
#    os: linux
#    dist: trusty
#    sudo: required
#    addons:
#      apt:
#        sources:
#        - ubuntu-toolchain-r-test
#        - *pkg_src_zeromq_ubuntu14
#        packages:
#        - *pkg_deps_common
#        - *pkg_deps_asan
#        - *pkg_deps_prereqs_zmq_master


  - env: CI_CZMQ_VER=3 BUILD_TYPE=default-tgt:check
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
  - env: CI_CZMQ_VER=3 BUILD_TYPE=default-tgt:dist
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
  - env: CI_CZMQ_VER=3 BUILD_TYPE=default-tgt:distcheck
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_doctools
  - env: CI_CZMQ_VER=3 BUILD_TYPE=default-tgt:experimental
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_doctools
        - valgrind

  - env: CI_CZMQ_VER=4 BUILD_TYPE=default-tgt:check
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
  - env: CI_CZMQ_VER=4 BUILD_TYPE=default-tgt:dist
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
  - env: CI_CZMQ_VER=4 BUILD_TYPE=default-tgt:distcheck
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_doctools
  - env: CI_CZMQ_VER=4 BUILD_TYPE=default-tgt:experimental
    os: linux
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_doctools
        - valgrind

  - env: CI_CZMQ_VER=pkg BUILD_TYPE=default-tgt:check
    os: linux
    dist: trusty
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - *pkg_src_zeromq_ubuntu14
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_prereqs_zmq_master
  - env: CI_CZMQ_VER=pkg BUILD_TYPE=default-tgt:dist
    os: linux
    dist: trusty
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - *pkg_src_zeromq_ubuntu14
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_prereqs_zmq_master
  - env: CI_CZMQ_VER=pkg BUILD_TYPE=default-tgt:distcheck
    os: linux
    dist: trusty
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - *pkg_src_zeromq_ubuntu14
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_doctools
        - *pkg_deps_prereqs_zmq_master
  - env: CI_CZMQ_VER=pkg BUILD_TYPE=default-tgt:experimental
    os: linux
    dist: trusty
    services: docker
    sudo: required
    addons:
      apt:
        sources:
        - *pkg_src_zeromq_ubuntu14
        - ubuntu-toolchain-r-test
        packages:
        - *pkg_deps_common
        - *pkg_deps_doctools
        - *pkg_deps_prereqs_zmq_master
        - valgrind

before_install:
- if [ -z "$CI_TIME" ] ; then export CI_TIME="$DEFAULT_CI_TIME" ; fi
- if [ -z "$CI_TRACE" ] ; then export CI_TRACE="$DEFAULT_CI_TRACE" ; fi
- if [ -z "$CI_QUIET" ] ; then export CI_QUIET="$DEFAULT_CI_QUIET" ; fi
- if [ -z "$CI_GIT_RESYNC" ] ; then export CI_GIT_RESYNC="$DEFAULT_CI_GIT_RESYNC" ; fi
- if [ -z "$CI_WIPE_FIRST" ] ; then export CI_WIPE_FIRST="$DEFAULT_CI_WIPE_FIRST" ; fi
- if [ -z "$CI_PARMAKE_QUIET" ] ; then export CI_PARMAKE_QUIET="$DEFAULT_CI_PARMAKE_QUIET" ; fi
- if [ "$TRAVIS_PULL_REQUEST" = "false" ]; then echo "NON-PR BUILD Detected, assuming a montly build from scratch + most recent codebase"; export CI_WIPE_FIRST="true" ; export CI_GIT_RESYNC="true"; fi
- if [ "$CI_GIT_SUBMODULES" != false ]; then date; echo Syncing Git submodule repos... ; if [ "$CI_GIT_RESYNC" == true ] ; then DO_BUMP=no time ./sync.sh ; else git submodule init && { git submodule update --depth 3 || git submodule update ; } ; fi ; fi
- if [ $TRAVIS_OS_NAME == "osx" ] ; then brew update; brew install binutils asciidoc docbook-xsl ; XML_CATALOG_FILES=/usr/local/etc/xml/catalog ; export XML_CATALOG_FILES ; fi
- if [ "$CXX" == "g++" ] ; then export CXX="g++-4.9" CC="gcc-4.9" ; fi

install:
- date; echo Installing pycparser...
- sudo pip install pycparser

before_script:
- if [ -z "$CI_TIME" ] ; then export CI_TIME="$DEFAULT_CI_TIME" ; fi
- if [ -z "$CI_TRACE" ] ; then export CI_TRACE="$DEFAULT_CI_TRACE" ; fi
- if [ -z "$CI_QUIET" ] ; then export CI_QUIET="$DEFAULT_CI_QUIET" ; fi
- if [ -z "$CI_GIT_RESYNC" ] ; then export CI_GIT_RESYNC="$DEFAULT_CI_GIT_RESYNC" ; fi
- if [ -z "$CI_WIPE_FIRST" ] ; then export CI_WIPE_FIRST="$DEFAULT_CI_WIPE_FIRST" ; fi
- if [ -z "$CI_PARMAKE_QUIET" ] ; then export CI_PARMAKE_QUIET="$DEFAULT_CI_PARMAKE_QUIET" ; fi
- date; echo Fixing up SASL...
- ./.travis.fixsasl

# Hand off to generated script for each BUILD_TYPE
### Note there are many components to test, it takes time...
### and some tests just sleep and resume slowly, so Travis gets worried.
###script: travis_wait 120 ./ci_build.sh
###script: echo "Current envvars:"; set ; ./ci_build.sh
script: ./ci_build.sh
